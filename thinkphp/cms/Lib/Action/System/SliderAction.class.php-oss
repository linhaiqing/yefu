<?php
/*
 * 导航管理
 *
 * @  Writers    Jaty
 * @  BuildTime  2014/12/02 9:43
 * 
 */
/*require 'static/phpsdk/autoload.php';
use Qiniu\Auth;
use Qiniu\Storage\UploadManager;
use Qiniu\Storage\BucketManager*/;
class SliderAction extends BaseAction{
	public function index(){
		$database_slider_category  = D('Slider_category');
		$category_list = $database_slider_category->field(true)->order('`cat_id` ASC')->select();
		$this->assign('category_list',$category_list);
		$this->display();
	}
	public function slider_video(){
		$model=M('videos');
		$where['id']=array('gt',0);
		$count = $model->where($where)->count();
        import('@.ORG.system_page');
        $p = new Page($count, 10);
        $list = $model->where($where)->order('`id` DESC')->limit($p->firstRow . ',' . $p->listRows)->select();
        foreach ($list as $k => $v) {
        	$list[$k]['size']=number_format($list[$k]['size']);
        	$list[$k]['ossurl']=D('Aliyuncs')->getOosurl($list[$k]['url']);  
        }
        $this->assign('list', $list);
        $pagebar = $p->show();
        $this->assign('pagebar', $pagebar);
		$this->display();
	}
	public function ajax_videoupload(){      
	      
	if($_FILES['file']['error'] != 4){
			$videos = D('Image')->handleVideo('videos');   
			            
			     
			if (!$videos['error']) {
				$url=trim($videos['url']['file'],'/');
			} else {
				$this->frame_submit_tips(0, $videos['msg']);
			}
			$Aliyun=D('Aliyun');
			$input_file = $Aliyun->upload_file($url,$url);    
			$transcode_job_id=$Aliyun->transcode_job_flow($input_file);  
			$snapshot=$Aliyun->snapshot_job_flow($input_file); 


			
			$data['transcode_job_id']=$transcode_job_id;
			$data['video_img']=$snapshot;
			$data['name']=$_FILES['file']['name'];
			$data['type']=$_FILES['file']['type'];
			$data['size']=$_FILES['file']['size'];
			$data['url']=$url;
			$data['addtime']=date("Y-m-d H:i:s",time());
			$result=M('videos')->add($data); 
			
		}     

	}
	/*public function ajax_videoupload(){
		$model=M('qiniu_video');
		$data=I('post.');
		$video=$model->where("hash='$data[hash]'")->find();
		$url=C('QINIU_DEMAIN').$data['name'].'?avinfo';
		$info=httpRequest($url);
		$info=json_decode($info[1],true);
		$duration=$info['format']['duration'];
		$duration=changeTimeType($duration);
		$data['duration']=$duration;
		     
		if(!$video){
			$data['addtime']=date("Y-m-d H:i:s",time());
			$model->add($data);
		}
	}*/
	public function slider_videoadd(){
		/*$url=$this->config['site_url'].'/index.php?c=Index&a=qiniunotify';
		
		     
	  // 用于签名的公钥和私钥
	  $accessKey = C('QINIU_ACCESSKEY');
	  $secretKey = C('QINIU_SECRETKEY');
	  // 空间名  https://developer.qiniu.io/kodo/manual/concepts
	  $bucket = C('QINIU_BACKET');
	  // 初始化签权对象
	  $auth = new Auth($accessKey, $secretKey);
	   $wmImg = \QiNiu\base64_urlSafeEncode(' http://onk4v18gc.bkt.clouddn.com/zc_logo.png');
		$pfopOps = "avthumb/m3u8/s/720x480";
        $pipeline ='';
        $policy = array(
            'persistentOps' => $pfopOps,
            'persistentNotifyUrl' => $url,
            'persistentPipeline' => $pipeline,
        );
	  // 生成上传Token
	  $token = $auth->uploadToken($bucket,null,3600,$policy);
	  // $bucketMgr = new BucketManager($auth);
	 // 构建 UploadManager 对象
	  // $uploadMgr = new UploadManager();
	  $this->token=$token;
	  $this->key=date("YmdHis",time());*/
	  $this->display();
	}
	public function cat_add(){
		$this->assign('bg_color','#F3F3F3');
		$this->display();
	}
	public function cat_modify(){
		if(IS_POST){
			$_POST['intro']=fulltext_filter($_POST['intro']);
			$database_slider_category  = D('Slider_category');
			if($database_slider_category->data($_POST)->add()){
				$this->success('添加成功！');
			}else{
				$this->error('添加失败！请重试~');
			}
		}else{
			$this->error('非法提交,请重新提交~');
		}
	}
	public function cat_edit(){
		$this->assign('bg_color','#F3F3F3');
		$now_category = $this->frame_check_get_category($_GET['cat_id']);
		$this->assign('now_category',$now_category);
		$this->display();
	}
	public function cat_amend(){
		if(IS_POST){
			$_POST['intro']=fulltext_filter($_POST['intro']);
			$database_slider_category  = D('Slider_category');
			if($database_slider_category->data($_POST)->save()){
				$this->success('编辑成功！');
			}else{
				$this->error('编辑失败！请重试~');
			}
		}else{
			$this->error('非法提交,请重新提交~');
		}
	}
	public function cat_del(){
		if(IS_POST){
			$database_slider_category  = D('Slider_category');
			$condition_slider_category['cat_id'] = $_POST['cat_id'];
			if($database_slider_category->where($condition_slider_category)->delete()){
				//删除所有广告
				$database_slider = D('Slider');
				$condition_slider['cat_id'] = $now_category['cat_id'];
				$slider_list = $database_slider->field(true)->where($condition_slider)->order('`id` DESC')->select();
				foreach($slider_list as $key=>$value){
					unlink('./upload/slider/'.$value['pic']); 
				}
				$database_slider->where($condition_slider)->delete();
				S('slider_list_'.$_POST['cat_id'],NULL);
				$this->success('删除成功！');
			}else{
				$this->error('删除失败！请重试~');
			}
		}else{
			$this->error('非法提交,请重新提交~');
		}
	}
	public function slider_list(){
		$now_category = $this->check_get_category($_GET['cat_id']);
		$this->assign('now_category',$now_category);
		$database_slider = D('Slider');
		$condition_slider['cat_id'] = $now_category['cat_id'];
		$slider_list = $database_slider->field(true)->where($condition_slider)->order('`sort` DESC,`id` ASC')->select();
		$this->assign('slider_list',$slider_list);
		$this->display();
	}
	public function slider_add(){
		$this->assign('bg_color','#F3F3F3');
		$now_category = $this->frame_check_get_category($_GET['cat_id']);
		$this->assign('now_category',$now_category);
		$this->display();
	}
	public function slider_modify(){
		$url=$_POST['url']."?avinfo";
		$info=httpRequest($url);
		$info=json_decode($info[1],true);
		$duration=$info['format']['duration'];
		$duration=changeTimeType($duration);
		$_POST['duration']=$duration;
		     

	     
		if($_FILES['pic']['error'] != 4){
			$image = D('Image')->handle($this->system_session['id'], 'slider');
			if (!$image['error']) {
				$_POST = array_merge($_POST, str_replace('/upload/slider/', '', $image['url']));
				     
			} else {
				$this->frame_submit_tips(0, $image['msg']);
			}
			//上传图片
// 			$rand_num = date('Y/m',$_SERVER['REQUEST_TIME']);
// 			$upload_dir = './upload/slider/'.$rand_num.'/'; 
// 			if(!is_dir($upload_dir)){
// 				mkdir($upload_dir,0777,true);
// 			}
// 			import('ORG.Net.Uploa dFile');
// 			$upload = new Upload File();
// 			$upload->maxSize = 10*1024*1024;
// 			$upload->allowExts = array('jpg','jpeg','png','gif');
// 			$upload->allowTypes = array('image/png','image/jpg','image/jpeg','image/gif');
// 			$upload->savePath = $upload_dir; 
// 			$upload->saveRule = 'uniqid';
// 			if($upload->upload()){
// 				$uploadList = $upload->getUpload FileInfo();
// 				$_POST['pic'] = $rand_num.'/'.$uploadList[0]['savename'];
// 			}else{
// 				$this->frame_submit_tips(0,$upload->getErrorMsg());
// 			}
		}
		$_POST['last_time'] = $_SERVER['REQUEST_TIME'];
		$_POST['content']=fulltext_filter($_POST['content']);
		$database_slider = D('Slider');
		if($id = $database_slider->data($_POST)->add()){
			D('Image')->update_table_id('/upload/slider/' . $_POST['pic'], $id, 'slider');
			S('slider_list_'.$_POST['cat_id'],NULL);
			$this->frame_submit_tips(1,'添加成功！');
		}else{
			$this->frame_submit_tips(0,'添加失败！请重试~');
		}
	}
	public function slider_edit(){
		$this->assign('bg_color','#F3F3F3');
		$database_slider = D('Slider');
		$condition_slider['id'] = $_GET['id'];
		$now_slider = $database_slider->field(true)->where($condition_slider)->find();
		if(empty($now_slider)){
			$this->frame_error_tips('该导航不存在！');
		}
		$this->assign('now_slider',$now_slider);
		$this->display();
	}
	public function slider_amend(){
		$database_slider = D('Slider');
		$condition_slider['id'] = $_POST['id'];
		$now_slider = $database_slider->field(true)->where($condition_slider)->find();
		if($_FILES['pic']['error'] != 4){
			$image = D('Image')->handle($this->system_session['id'], 'slider');
			if (!$image['error']) {
				$_POST = array_merge($_POST, str_replace('/upload/slider/', '', $image['url']));
				//$_POST = array_merge($_POST, $image['url']);
			} else {
				$this->frame_submit_tips(0, $image['msg']);
			}
		}
		$url=$_POST['url']."?avinfo";
		$info=httpRequest($url);
		$info=json_decode($info[1],true);
		$duration=$info['format']['duration'];
		$duration=changeTimeType($duration);
		$_POST['duration']=$duration;

		$_POST['last_time'] = $_SERVER['REQUEST_TIME'];
		$_POST['content']=fulltext_filter($_POST['content']);
		     
		if($database_slider->data($_POST)->save()){
			D('Image')->update_table_id('/upload/slider/' . $_POST['pic'], $_POST['id'], 'slider');
			S('slider_list_'.$_POST['cat_id'],NULL);
			if($_POST['pic']){
				if(strpos($now_slider['pic'],'2014/') === false){
					unlink('./upload/slider/'.$now_slider['pic']); 
				}
			}
			$this->frame_submit_tips(1,'编辑成功！');
		}else{
			$this->frame_submit_tips(0,'编辑失败！请重试~');
		}
	}
	public function slider_del(){
		$database_slider = D('Slider');
		$condition_slider['id'] = $_POST['id'];
		$now_slider = $database_slider->field(true)->where($condition_slider)->find();
		if($database_slider->where($condition_slider)->delete()){
			S('slider_list_'.$now_slider['cat_id'],NULL);
			if($now_slider['pic']){
				if(strpos($now_slider['pic'],'2014/') === false){
					unlink('./upload/slider/'.$now_slider['pic']); 
				}
			}
			$this->success('删除成功');
		}else{
			$this->error('删除失败！请重试~');
		}
	}
	protected function get_category($cat_id){
		$database_slider_category  = D('Slider_category');
		$condition_slider_category['cat_id'] = $cat_id;
		$now_category = $database_slider_category->field(true)->where($condition_slider_category)->find();
		return $now_category;
	}
	protected function frame_check_get_category($cat_id){
		$now_category = $this->get_category($cat_id);
		if(empty($now_category)){
			$this->frame_error_tips('分类不存在！');
		}else{
			return $now_category;
		}
	}
	protected function check_get_category($cat_id){
		$now_category = $this->get_category($cat_id);
		if(empty($now_category)){
			$this->error_tips('分类不存在！');
		}else{
			return $now_category;
		}
	}
}